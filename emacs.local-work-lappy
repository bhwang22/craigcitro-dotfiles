;; -*- mode: Emacs-lisp; lexical-binding: t -*-
;;

;;------------------------
;; julia mode
;;------------------------
(add-hook 'julia-mode-hook
          '(lambda ()
             (setq 'julia-basic-offset 2)))
(when (require 'julia-mode nil t)
  (add-to-list 'auto-mode-alist '("\\.jl$" . julia-mode)))

;;---------------------
;; flymake
;;---------------------
(require 'cc/flymake-by-mode "flymake-by-mode")

;;---------------------------
;; Python
;;---------------------------
(defvar cc/python-ignore-correction nil
  "Temporary hack for indentation woes.")
(when (require 'python)
  (provide 'python-mode) ;; bye-bye python-mode.el
  (setq python-indent 2)
  (unless cc/python-ignore-correction
    (defadvice python-calculate-indentation (after ad-return-value activate)
      (save-excursion
        (beginning-of-line)
        (skip-chars-backward " \t\r\n\f")
        (when (memq (char-before (point))
                    ;; ( [ {
                    (list 40 91 123))
          (setq ad-return-value (+ 2 ad-return-value))))))
  (defun cc/python-indent-region ()
    (interactive)
    (python-indent-region (region-beginning) (region-end)))
  (define-key python-mode-map "\C-ca" 'cc/python-indent-region)
  (define-key inferior-python-mode-map "\C-p" 'comint-previous-input)
  (define-key inferior-python-mode-map "\C-n" 'comint-next-input)
  )

;;------------------
;; Haskell
;;------------------
;; Generic bit
(let ((haskell-site-file
       (cc/find-file-or-nil "haskell-mode/haskell-site-file.el")))
  (when haskell-site-file
    (load haskell-site-file)
    (add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))
    (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)))

;; ghc-mod:
;;   https://github.com/kazu-yamamoto/ghc-mod
(cc/add-to-load-path-if-exists "ghc-mod/elisp")
(let ((cabal-path (concat (getenv "HOME") "/cabal/bin")))
  (when (file-exists-p cabal-path)
    (add-to-list 'exec-path cabal-path)))
;; (autoload 'ghc-init "ghc" nil t)
;; (add-hook 'haskell-mode-hook (lambda () (ghc-init) (flymake-mode)))

;; hoogle
(when (require 'haskell-mode nil t)
  (setq haskell-hoogle-command "hoogle")
  (define-key haskell-mode-map "\C-c?" 'haskell-hoogle))

;;------------------
;; deft
;;------------------
(when (require 'deft nil t)
  (setq deft-extension "md")
  (setq deft-directory "~/w/nv")
  (setq deft-text-mode 'markdown-mode)
  (setq deft-use-filename-as-title t)
  (global-set-key "\M-\C-d" 'deft))
